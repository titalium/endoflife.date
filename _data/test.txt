<?php
// Function to parse the FortiGate configuration file
function parseFortiGateConfig($file_path) {
    // Read the content of the configuration file
    $config_content = file_get_contents($file_path);

    if ($config_content === false) {
        throw new Exception("Unable to read the configuration file.");
    }

    // Split the config into lines
    $lines = explode("\n", $config_content);

    // Initialize an array to store rules
    $rules = [];

    foreach ($lines as $line) {
        // Trim whitespace and skip empty or commented lines
        $trimmed_line = trim($line);
        
        if (!empty($trimmed_line) && substr($trimmed_line, 0, 1) !== "#") {
            // Check if the line starts with a rule definition (e.g., "config firewall.policy.rule")
            if (strpos($trimmed_line, 'config firewall.policy.rule') === 0) {
                // Start parsing this rule
                $rule = [];
            } else if (strpos($trimmed_line, 'end') === 0) {
                // End of a rule definition, store it in the rules array
                if (!empty($rule)) {
                    $rules[] = $rule;
                }
                continue;
            } else {
                // Add line to current rule
                list($key, $value) = explode(":", $trimmed_line, 2);
                $rule[trim($key)] = trim($value);
            }
        }
    }

    return $rules;
}

// Function to find duplicate rules
function findDuplicateRules($rules) {
    $duplicates = [];
    
    foreach ($rules as $index => $rule) {
        // Create a unique key based on rule attributes (e.g., srcintf, dstintf, action)
        $key = md5(json_encode(array_intersect_key($rule, [
            'srcintf' => '',
            'dstintf' => '',
            'action' => ''
        ])));
        
        if (!isset($duplicates[$key])) {
            // If this combination hasn't been seen before, store it
            $duplicates[$key] = [];
        }
        
        // Add the current rule index to the list of rules with this key
        $duplicates[$key][] = $index;
    }

    // Filter out non-duplicate keys
    $true_duplicates = array_filter($duplicates, function($indices) {
        return count($indices) > 1;
    });

    return $true_duplicates;
}

// Function to display duplicates and their details
function displayDuplicates($duplicates, $rules) {
    if (empty($duplicates)) {
        echo "No duplicate rules found.\n";
        return;
    }

    foreach ($duplicates as $key => $indices) {
        echo "Duplicate rule combination identified:\n";
        
        foreach ($indices as $index) {
            echo "Policy Index: $index\n";
            print_r($rules[$index]);
            echo "-------------------------\n";
        }
    }
}

// Main execution
try {
    // Path to the FortiGate configuration file
    $file_path = 'path/to/your/fortigate/config.txt';
    
    // Parse the configuration file
    $rules = parseFortiGateConfig($file_path);
    
    // Find duplicate rules
    $duplicates = findDuplicateRules($rules);
    
    // Display duplicates and their details
    displayDuplicates($duplicates, $rules);
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}
?>
